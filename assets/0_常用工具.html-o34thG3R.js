import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,e as s,o as a}from"./app-H5WDZ675.js";const t={};function o(n,e){return a(),l("div",null,e[0]||(e[0]=[s(`<h1 id="常用工具" tabindex="-1"><a class="header-anchor" href="#常用工具"><span>常用工具</span></a></h1><h2 id="docker多阶段构建" tabindex="-1"><a class="header-anchor" href="#docker多阶段构建"><span>Docker多阶段构建</span></a></h2><ul><li>Dockerfile.multist</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">FROM golang:alpine as builder</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">WORKDIR /go/src</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">COPY httpserver.go .</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">RUN go build -o httpd ./httpserver.go</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">From alpine:latest</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">WORKDIR /root/</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">COPY --from=builder /go/src/httpd .</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">RUN chmod +x /root/httpd</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ENTRYPOINT [&quot;/root/httpd&quot;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker build -t repodemo/httpd-multi-stage -f Dockerfile.multist</code></p><h2 id="go-build" tabindex="-1"><a class="header-anchor" href="#go-build"><span>go build</span></a></h2><ul><li><code>-ldflags</code> 指定链接器参数</li><li><code>-gcflags</code> 指定编译器参数</li><li><code>-ldflags &quot;-X main.version=1.0.0 -X main.buildTime=$(date +%Y-%m-%d\\ %H:%M:%S)&quot;</code> 添加版本信息</li><li><code>-ldflags &quot;-s -w&quot;</code> 去掉调试信息</li><li><code>-trimpath</code> 去掉编译后的二进制文件中的路径信息</li><li><code>-o</code> 指定输出文件名</li><li><code>-v</code> 打印详细信息</li><li><code>-x</code> 打印编译过程</li><li><code>-race</code> 检测竞态条件</li><li><code>-gcflags &quot;all=-N -l&quot;</code> 禁用编译器优化和内联</li><li><code>-asmflags &quot;all=-trimpath=$PWD&quot;</code> 去掉汇编代码中的路径信息</li><li><code>-extldflags &quot;-static&quot;</code> 静态链接</li><li><code>-p</code> 指定并行编译的CPU核数</li><li><code>-a</code> 强制重新编译所有包</li><li><code>-n</code> 打印编译命令但不执行</li></ul><h2 id="go-fmt" tabindex="-1"><a class="header-anchor" href="#go-fmt"><span>go fmt</span></a></h2><ul><li><code>go fmt ./...</code> 格式化代码</li><li><code>-s</code> 去掉多余的空格</li><li><code>-w</code> 将格式化后的代码写回文件</li><li><code>-l</code> 只打印有问题的行</li><li><code>-r</code> 指定格式化规则</li><li><code>-d</code> 只打印格式化后的代码，不写回文件</li><li><code>-x</code> 打印格式化命令但不执行</li><li><code>-e</code> 打印错误信息</li><li><code>-c</code> 指定要格式化的文件或目录</li><li><code>-i</code> 指定要格式化的文件或目录的路径</li></ul><h2 id="go-vet" tabindex="-1"><a class="header-anchor" href="#go-vet"><span>go vet</span></a></h2><ul><li><code>go vet ./...</code> 检查代码中的潜在错误</li></ul><h2 id="go-test" tabindex="-1"><a class="header-anchor" href="#go-test"><span>go test</span></a></h2><ul><li><code>-v</code> 打印详细信息</li><li><code>-x</code> 打印测试命令但不执行</li><li><code>-c</code> 只编译测试代码，不执行测试</li><li><code>-cover</code> 生成测试覆盖率报告</li><li><code>-coverprofile</code> 指定测试覆盖率报告的文件名</li></ul><h2 id="golangci-lint" tabindex="-1"><a class="header-anchor" href="#golangci-lint"><span>golangci-lint</span></a></h2><ul><li><code>golangci-lint run</code> 运行代码检查</li><li><code>golangci-lint help</code> 查看帮助信息</li></ul><h2 id="替换" tabindex="-1"><a class="header-anchor" href="#替换"><span>替换</span></a></h2><h3 id="gofmt-r" tabindex="-1"><a class="header-anchor" href="#gofmt-r"><span>gofmt -r</span></a></h3><ul><li><code>gofmt -r &quot;oldString -&gt; newString&quot; -w .</code><ul><li><code>-l</code> 受影响文件</li><li><code>-w</code> 写入文件</li></ul></li></ul><h3 id="gorename" tabindex="-1"><a class="header-anchor" href="#gorename"><span>gorename</span></a></h3><h3 id="gomvpkg-移动包并更新包导入路径" tabindex="-1"><a class="header-anchor" href="#gomvpkg-移动包并更新包导入路径"><span>gomvpkg (移动包并更新包导入路径)</span></a></h3><h2 id="go-doc" tabindex="-1"><a class="header-anchor" href="#go-doc"><span>go doc</span></a></h2><h2 id="godoc" tabindex="-1"><a class="header-anchor" href="#godoc"><span>godoc</span></a></h2><h2 id="https-talks-golang-org-2012-splash-slide" tabindex="-1"><a class="header-anchor" href="#https-talks-golang-org-2012-splash-slide"><span>https://talks.golang.org/2012/splash.slide</span></a></h2><h2 id="gopls" tabindex="-1"><a class="header-anchor" href="#gopls"><span>gopls</span></a></h2><h2 id="go-generate" tabindex="-1"><a class="header-anchor" href="#go-generate"><span>go generate</span></a></h2><ul><li><p>在目标构建之前驱动代码生成动作的执行</p></li><li><p><code>//go:generate protoc -I ./IDL msg.proto --gofast_out=./msg</code></p></li><li><p><code>go generate -x -v</code> 执行并打印命令</p></li></ul><h2 id="go-embed" tabindex="-1"><a class="header-anchor" href="#go-embed"><span>go embed</span></a></h2><ul><li><code>//go:embed static/*</code></li><li><code>http.FileServer(http.FS(staticFS))</code></li></ul>`,28)]))}const r=i(t,[["render",o],["__file","0_常用工具.html.vue"]]),g=JSON.parse('{"path":"/notebook/go/6_%E5%85%B6%E5%AE%83/0_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.html","title":"常用工具","lang":"zh-CN","frontmatter":{"description":"常用工具 Docker多阶段构建 Dockerfile.multist docker build -t repodemo/httpd-multi-stage -f Dockerfile.multist go build -ldflags 指定链接器参数 -gcflags 指定编译器参数 -ldflags \\"-X main.version=1.0.0 -...","head":[["meta",{"property":"og:url","content":"https://zmf96.github.io/notebook/go/6_%E5%85%B6%E5%AE%83/0_%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:site_name","content":"小明的笔记本"}],["meta",{"property":"og:title","content":"常用工具"}],["meta",{"property":"og:description","content":"常用工具 Docker多阶段构建 Dockerfile.multist docker build -t repodemo/httpd-multi-stage -f Dockerfile.multist go build -ldflags 指定链接器参数 -gcflags 指定编译器参数 -ldflags \\"-X main.version=1.0.0 -..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-08T02:38:17.000Z"}],["meta",{"property":"article:author","content":"XiaoMing"}],["meta",{"property":"article:modified_time","content":"2024-11-08T02:38:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-08T02:38:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoMing\\",\\"url\\":\\"https://github.com/zmf963\\"}]}"]]},"headers":[{"level":2,"title":"Docker多阶段构建","slug":"docker多阶段构建","link":"#docker多阶段构建","children":[]},{"level":2,"title":"go build","slug":"go-build","link":"#go-build","children":[]},{"level":2,"title":"go fmt","slug":"go-fmt","link":"#go-fmt","children":[]},{"level":2,"title":"go vet","slug":"go-vet","link":"#go-vet","children":[]},{"level":2,"title":"go test","slug":"go-test","link":"#go-test","children":[]},{"level":2,"title":"golangci-lint","slug":"golangci-lint","link":"#golangci-lint","children":[]},{"level":2,"title":"替换","slug":"替换","link":"#替换","children":[{"level":3,"title":"gofmt -r","slug":"gofmt-r","link":"#gofmt-r","children":[]},{"level":3,"title":"gorename","slug":"gorename","link":"#gorename","children":[]},{"level":3,"title":"gomvpkg (移动包并更新包导入路径)","slug":"gomvpkg-移动包并更新包导入路径","link":"#gomvpkg-移动包并更新包导入路径","children":[]}]},{"level":2,"title":"go doc","slug":"go-doc","link":"#go-doc","children":[]},{"level":2,"title":"godoc","slug":"godoc","link":"#godoc","children":[]},{"level":2,"title":"https://talks.golang.org/2012/splash.slide","slug":"https-talks-golang-org-2012-splash-slide","link":"#https-talks-golang-org-2012-splash-slide","children":[]},{"level":2,"title":"gopls","slug":"gopls","link":"#gopls","children":[]},{"level":2,"title":"go generate","slug":"go-generate","link":"#go-generate","children":[]},{"level":2,"title":"go embed","slug":"go-embed","link":"#go-embed","children":[]}],"git":{"createdTime":1731033497000,"updatedTime":1731033497000,"contributors":[{"name":"one","email":"one@one.com","commits":1}]},"readingTime":{"minutes":1.68,"words":504},"filePathRelative":"notebook/go/6_其它/0_常用工具.md","localizedDate":"2024年11月8日","excerpt":"\\n<h2>Docker多阶段构建</h2>\\n<ul>\\n<li>Dockerfile.multist</li>\\n</ul>\\n<div class=\\"language-yaml line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"yaml\\" data-title=\\"yaml\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">FROM golang:alpine as builder</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">WORKDIR /go/src</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">COPY httpserver.go .</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">RUN go build -o httpd ./httpserver.go</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">From alpine:latest</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">WORKDIR /root/</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">COPY --from=builder /go/src/httpd .</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">RUN chmod +x /root/httpd</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">ENTRYPOINT [\\"/root/httpd\\"]</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{r as comp,g as data};
