import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as s,o as a}from"./app-H5WDZ675.js";const l={};function t(r,i){return a(),n("div",null,i[0]||(i[0]=[s(`<h1 id="常见陷阱" tabindex="-1"><a class="header-anchor" href="#常见陷阱"><span>常见陷阱</span></a></h1><h2 id="短变量" tabindex="-1"><a class="header-anchor" href="#短变量"><span>短变量</span></a></h2><ul><li>短变量声明不总是会声明一个新变量</li><li>短变量声明会导致难于发现的变量遮蔽</li></ul><h2 id="for-range" tabindex="-1"><a class="header-anchor" href="#for-range"><span>for range</span></a></h2><ul><li>针对string类型的for range迭代不是逐字节迭代，而是逐字符迭代</li><li>对map类型内元素的迭代顺序是随机</li><li>在“复制品”上进行迭代</li><li>迭代变量是重用的 <ul><li>循环变量v仅仅被声明了一次并在后续整个迭代过程中被重用</li></ul></li></ul><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>string</span></a></h2><ul><li>string是只读的byte切片，不能修改</li><li>字符串长度：len()函数返回的是字符串的字节数，而不是字符数。</li></ul><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><ul><li>使用值类型receiver的方法无法改变类型实例的状态</li><li>值类型实例可以调用采用指针类型receiver的方法，指针类型实例也可以调用采用值类型receiver的方法</li></ul><h2 id="break" tabindex="-1"><a class="header-anchor" href="#break"><span>break</span></a></h2><ul><li>不接标签（label）的break语句会跳出最内层的switch、select或for代码块。</li></ul><h2 id="time包" tabindex="-1"><a class="header-anchor" href="#time包"><span>time包</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">packgae</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> main</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;fmt&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;time&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">func</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Go语言采用参考时间的方式，来进行格式化</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fmt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Now</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2006-01-02 15:04:05&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="encoding-json" tabindex="-1"><a class="header-anchor" href="#encoding-json"><span>encoding/json</span></a></h2><ul><li>未导出的结构体字段不会被编码到JSON文本中</li><li>nil切片和空切片可能被编码为不同文本</li><li>字节切片可能被编码为base64编码的文本</li><li>当JSON文本中的整型数值被解码为interface{}类型时，其底层真实类型为float64</li></ul><h2 id="net-http" tabindex="-1"><a class="header-anchor" href="#net-http"><span>net/http</span></a></h2><ul><li>http包需要我们手动关闭Response.Body</li><li>HTTP客户端默认不会及时关闭已经用完的HTTP连接</li></ul>`,17)]))}const o=e(l,[["render",t],["__file","1_常见陷阱.html.vue"]]),d=JSON.parse('{"path":"/notebook/go/6_%E5%85%B6%E5%AE%83/1_%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1.html","title":"常见陷阱","lang":"zh-CN","frontmatter":{"description":"常见陷阱 短变量 短变量声明不总是会声明一个新变量 短变量声明会导致难于发现的变量遮蔽 for range 针对string类型的for range迭代不是逐字节迭代，而是逐字符迭代 对map类型内元素的迭代顺序是随机 在“复制品”上进行迭代 迭代变量是重用的 循环变量v仅仅被声明了一次并在后续整个迭代过程中被重用 string string是只读的b...","head":[["meta",{"property":"og:url","content":"https://zmf96.github.io/notebook/go/6_%E5%85%B6%E5%AE%83/1_%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1.html"}],["meta",{"property":"og:site_name","content":"小明的笔记本"}],["meta",{"property":"og:title","content":"常见陷阱"}],["meta",{"property":"og:description","content":"常见陷阱 短变量 短变量声明不总是会声明一个新变量 短变量声明会导致难于发现的变量遮蔽 for range 针对string类型的for range迭代不是逐字节迭代，而是逐字符迭代 对map类型内元素的迭代顺序是随机 在“复制品”上进行迭代 迭代变量是重用的 循环变量v仅仅被声明了一次并在后续整个迭代过程中被重用 string string是只读的b..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-08T02:38:17.000Z"}],["meta",{"property":"article:author","content":"XiaoMing"}],["meta",{"property":"article:modified_time","content":"2024-11-08T02:38:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见陷阱\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-08T02:38:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoMing\\",\\"url\\":\\"https://github.com/zmf963\\"}]}"]]},"headers":[{"level":2,"title":"短变量","slug":"短变量","link":"#短变量","children":[]},{"level":2,"title":"for range","slug":"for-range","link":"#for-range","children":[]},{"level":2,"title":"string","slug":"string","link":"#string","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"break","slug":"break","link":"#break","children":[]},{"level":2,"title":"time包","slug":"time包","link":"#time包","children":[]},{"level":2,"title":"encoding/json","slug":"encoding-json","link":"#encoding-json","children":[]},{"level":2,"title":"net/http","slug":"net-http","link":"#net-http","children":[]}],"git":{"createdTime":1731033497000,"updatedTime":1731033497000,"contributors":[{"name":"one","email":"one@one.com","commits":1}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"notebook/go/6_其它/1_常见陷阱.md","localizedDate":"2024年11月8日","excerpt":"\\n<h2>短变量</h2>\\n<ul>\\n<li>短变量声明不总是会声明一个新变量</li>\\n<li>短变量声明会导致难于发现的变量遮蔽</li>\\n</ul>\\n<h2>for range</h2>\\n<ul>\\n<li>针对string类型的for range迭代不是逐字节迭代，而是逐字符迭代</li>\\n<li>对map类型内元素的迭代顺序是随机</li>\\n<li>在“复制品”上进行迭代</li>\\n<li>迭代变量是重用的\\n<ul>\\n<li>循环变量v仅仅被声明了一次并在后续整个迭代过程中被重用</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>string</h2>\\n<ul>\\n<li>string是只读的byte切片，不能修改</li>\\n<li>字符串长度：len()函数返回的是字符串的字节数，而不是字符数。</li>\\n</ul>","autoDesc":true}');export{o as comp,d as data};
