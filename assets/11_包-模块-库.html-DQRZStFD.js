import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,e as t}from"./app-CXiloG2g.js";const a={},l=t(`<h1 id="包-模块-库" tabindex="-1"><a class="header-anchor" href="#包-模块-库"><span>包-模块-库</span></a></h1><ul><li><p><code>import &quot;net/http&quot;</code></p><ul><li>导入完整的模块路径，非包名。</li><li>编译器依次搜索标准库、项目根路径，及缓存目录。</li><li>引用包成员，用包名，而非导入路径</li></ul></li><li><p>导入多个包</p><ul><li><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;osx/lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    nix</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;linux/lib&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  别名</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xxx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    . </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;libux/lib&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   简化</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xxx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">相当于from</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> math</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> *</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    _</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;math&quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    初始化</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">：</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">无法引用</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">，</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">仅用来初始化目标包</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>go mod</p><ul><li>go mod vendor # 将依赖复制到./vendor目录下</li></ul></li><li><p>go work # 解决多模块开发可能遇到的问题</p><ul><li>go work init # 初始化工作空间</li><li>go work user ./xxx1 ./xxx2 # 添加模块</li><li>GOWORK=off go build -mod vendor # 禁用工作空间，以vendor模式编译</li></ul></li></ul>`,2),e=[l];function h(p,o){return n(),s("div",null,e)}const d=i(a,[["render",h],["__file","11_包-模块-库.html.vue"]]),g=JSON.parse('{"path":"/notebook/go/1_%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/11_%E5%8C%85-%E6%A8%A1%E5%9D%97-%E5%BA%93.html","title":"包-模块-库","lang":"zh-CN","frontmatter":{"description":"包-模块-库 import \\"net/http\\" 导入完整的模块路径，非包名。 编译器依次搜索标准库、项目根路径，及缓存目录。 引用包成员，用包名，而非导入路径 导入多个包 go mod go mod vendor # 将依赖复制到./vendor目录下 go work # 解决多模块开发可能遇到的问题 go work init # 初始化工作空间 g...","head":[["meta",{"property":"og:url","content":"https://zmf96.github.io/notebook/go/1_%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/11_%E5%8C%85-%E6%A8%A1%E5%9D%97-%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"小明的笔记本"}],["meta",{"property":"og:title","content":"包-模块-库"}],["meta",{"property":"og:description","content":"包-模块-库 import \\"net/http\\" 导入完整的模块路径，非包名。 编译器依次搜索标准库、项目根路径，及缓存目录。 引用包成员，用包名，而非导入路径 导入多个包 go mod go mod vendor # 将依赖复制到./vendor目录下 go work # 解决多模块开发可能遇到的问题 go work init # 初始化工作空间 g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-02T04:05:12.000Z"}],["meta",{"property":"article:author","content":"XiaoMing"}],["meta",{"property":"article:modified_time","content":"2024-08-02T04:05:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"包-模块-库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-02T04:05:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XiaoMing\\",\\"url\\":\\"https://github.com/zmf963\\"}]}"]]},"headers":[],"git":{"createdTime":1722571512000,"updatedTime":1722571512000,"contributors":[{"name":"one","email":"one@one.com","commits":1}]},"readingTime":{"minutes":0.54,"words":161},"filePathRelative":"notebook/go/1_语言基础/11_包-模块-库.md","localizedDate":"2024年8月2日","excerpt":"\\n<ul>\\n<li>\\n<p><code>import \\"net/http\\"</code></p>\\n<ul>\\n<li>导入完整的模块路径，非包名。</li>\\n<li>编译器依次搜索标准库、项目根路径，及缓存目录。</li>\\n<li>引用包成员，用包名，而非导入路径</li>\\n</ul>\\n</li>\\n<li>\\n<p>导入多个包</p>\\n<ul>\\n<li>\\n<div class=\\"language-go line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"go\\" data-title=\\"go\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">    \\"osx/lib\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">    nix</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"linux/lib\\"</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">  别名</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> nix</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">xxx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    . </span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"libux/lib\\"</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">   简化</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">：</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">xxx</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">相当于from</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> math</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> import</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#C678DD\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">    _</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"math\\"</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">    初始化</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">：</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">无法引用</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">，</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">仅用来初始化目标包</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p>go mod</p>\\n<ul>\\n<li>go mod vendor # 将依赖复制到./vendor目录下</li>\\n</ul>\\n</li>\\n<li>\\n<p>go work # 解决多模块开发可能遇到的问题</p>\\n<ul>\\n<li>go work init # 初始化工作空间</li>\\n<li>go work user ./xxx1 ./xxx2 # 添加模块</li>\\n<li>GOWORK=off go build -mod vendor # 禁用工作空间，以vendor模式编译</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,g as data};
